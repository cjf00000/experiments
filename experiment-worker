#!/usr/bin/env python
import argparse, json, os, glob, uuid, threading, subprocess, utils, time, random, sys
from lockfile import LockFile

def main():
    parser = argparse.ArgumentParser(description="Do an experiment")
    parser.add_argument('config', metavar='config', type=str, help='config file')
    args = parser.parse_args() 
    
    # Load config file
    f = open(args.config, 'r')
    conf = json.loads(f.read())
    f.close()
    
    # Chdir
    os.chdir(conf["name"])
    
    # Event loop
    tasks_path = 'tasks'
    while True:
        # Pick a file from tasks
        # If no, loop
        # If finish tag find, stop

        if utils.allfinished():
            break

        has_task = False
        file = ''

        lock = LockFile(tasks_path)
        lock.acquire()
        f = open(tasks_path, 'r')
        remaining = f.readlines()
        if len(remaining) > 0:
            has_task = True
            file = remaining[0].strip()
        f.close()

        if has_task:
            f = open(tasks_path, 'w')
            f.writelines(remaining[1:])
            f.close()
        lock.release()

        if has_task:
            work(file, conf)

        time.sleep(1)

def worker_thread(arg, file_name, conf):
    myarg = arg[:]	
    print 'Start ' + file_name
    stdout_file = '../' + file_name

    # Handle file output
    is_file_output = False
    if "output" in conf and conf["output"] == "file":
        myarg.append( ("output", stdout_file) )
	is_file_output = True

    # Substitute arguments
    command = conf["command"][:]
    for i, argv in enumerate(command):
        for key, value in myarg:
            command[i] = command[i].replace('$' + key, str(value))

    if not is_file_output:
        fout = open(stdout_file, 'w')
        subprocess.call(command, stdout=fout)
        fout.close()
    else:
        subprocess.call(command)

    print 'Finish ' + file_name

def work(file_name, conf):
    utils.heartbeat(file_name)
    # Initialize task
    work_dir = file_name + '-' + str(uuid.uuid4())
    os.mkdir(work_dir)
    os.chdir(work_dir)

    # Spawn worker thread
    f = open('../' + file_name + '.todo', 'r')
    arg = json.loads(f.read())
    f.close()
    worker = threading.Thread(target=worker_thread, args=(arg, file_name, conf))
    worker.start()

    start = True

    # Main loop
    while True:
        if os.path.exists('../allfinished'):
            sys.exit(0)
            
        # Heart beat every 1 second
        utils.heartbeat('../' + file_name)
        if not worker.is_alive():
            break

        if not start:
            time.sleep(1)
        else:
            start = True

    # Join should be finish instantly
    worker.join()

    # Create finish tag
    os.chdir('..')
    utils.finish(file_name)

if __name__ == "__main__":
    main()
